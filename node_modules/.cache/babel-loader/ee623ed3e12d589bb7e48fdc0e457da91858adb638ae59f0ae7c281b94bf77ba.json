{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createFloor } from './floor.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var floor = createFloor({\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  return typed(name, {\n    'number, number': _modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n\n  /**\n  * Calculate the modulus of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @returns {number} res\n  * @private\n  */\n  function _modNumber(x, y) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n\n    // We use mathjs floor to handle errors associated with\n    // precision float approximation\n    return y === 0 ? x : x - y * floor(x / y);\n  }\n});","map":{"version":3,"names":["factory","createFloor","createMatAlgo02xDS0","createMatAlgo03xDSf","createMatAlgo05xSfSf","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createMod","_ref","typed","config","round","matrix","equalScalar","zeros","DenseMatrix","concat","floor","matAlgo02xDS0","matAlgo03xDSf","matAlgo05xSfSf","matAlgo11xS0s","matAlgo12xSfs","matrixAlgorithmSuite","_modNumber","BigNumberBigNumber","x","y","isNeg","Error","isZero","mod","FractionFraction","compare","add","SS","DS","SD","Ss","sS"],"sources":["C:/Users/tassi/OneDrive/Área de Trabalho/VNW 2023/calculadora/node_modules/mathjs/lib/esm/function/arithmetic/mod.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createFloor } from './floor.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var floor = createFloor({\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  return typed(name, {\n    'number, number': _modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n\n  /**\n  * Calculate the modulus of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @returns {number} res\n  * @private\n  */\n  function _modNumber(x, y) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n\n    // We use mathjs floor to handle errors associated with\n    // precision float approximation\n    return y === 0 ? x : x - y * floor(x / y);\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}